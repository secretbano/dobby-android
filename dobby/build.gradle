plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 30
    buildToolsVersion '30.0.3'
    ndkVersion '22.1.7171670'
    defaultConfig {
        minSdk 16
        targetSdk 30
        versionCode 3
        versionName '1.2'
        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_BUILD_TYPE=Release", "-DDOBBY_GENERATE_SHARED=OFF",
                        "-DDOBBY_DEBUG=OFF", "-DPlugin.Android.BionicLinkerRestriction=ON",
                        "-DANDROID_STL=none", "-DVERSION_REVISION=${defaultConfig.versionCode}",
                        "-DCMAKE_C_FLAGS_RELEASE=-Oz", "-DCMAKE_CXX_FLAGS_RELEASE=-Oz"
                cFlags "-Wno-builtin-macro-redefined", "-D__FILE__=__FILE_NAME__"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/CMakeLists.txt')
            version '3.20.3'
        }
    }
    buildFeatures {
        prefab true
        buildConfig false
        androidResources false
        prefabPublishing true
    }
    prefab {
        dobby {
            headers "${project.buildDir}/headers"
        }
    }
    publishing {
        singleVariant("release")
    }
}

dependencies {
    implementation('dev.rikka.ndk.thirdparty:cxx:1.1.0')
}

task copyHeaders(type: Sync) {
    into("${project.buildDir}/headers")
    from('src/main/dobby/include') {
        include '*.h'
    }
    from('src/main/dobby/builtin-plugin/BionicLinkerRestriction') {
        include '*.h'
    }
    from('src/main/dobby/builtin-plugin/SymbolResolver') {
        include '*.h'
    }
}
preBuild.configure {
    dependsOn copyHeaders
}

afterEvaluate {
    android.libraryVariants.collect { variant ->
        task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
            from variant.javaCompileProvider.get().source
            classifier 'sources'
        }
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                options.addStringOption '-release', '8'
            }
            source variant.javaCompileProvider.get().source
            classpath += variant.javaCompileProvider.get().classpath
            classpath += files(android.getBootClasspath())
            options {
                failOnError false
                encoding 'UTF-8'
            }
        }
        task("generate${variant.name.capitalize()}JavadocJar", type: Jar) {
            dependsOn "generate${variant.name.capitalize()}Javadoc"
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            classifier 'javadoc'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group 'io.github.vvb2060.ndk'
            artifactId 'dobby'
            version android.defaultConfig.versionName
            afterEvaluate {
                artifact bundleReleaseAar
                artifact generateReleaseJavadocJar
                artifact generateReleaseSourcesJar
            }
            pom {
                name = 'dobby'
                description = 'dobby static library prefab for android.'
                url = 'https://github.com/vvb2060/dobby-android'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://github.com/LSPosed/Dobby/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        name = 'vvb2060'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vvb2060/dobby-android.git'
                    url = 'https://github.com/vvb2060/dobby-android'
                }
            }
        }
    }
    repositories {
        maven {
            name 'ossrh'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    def secretKeyRingFile = findProperty("signing.secretKeyRingFile")

    if (secretKeyRingFile != null && file(secretKeyRingFile).exists()) {
        sign publishing.publications
    } else if (signingKey != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
